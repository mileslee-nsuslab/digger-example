---
name: plan
on:
  pull_request:
    branches: [main]
    paths:
      - 'terraform/**'
env:
  SLACK_NOTI_TEMPLATE_PATH: './'
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TFACTION_IS_APPLY: 'false'
permissions:
  id-token: write
  contents: write
  pull-requests: write
jobs:
  setup:
    if : ${{ ! startsWith(github.event.pull_request.title, 'Scaffold a working directory') }}
    runs-on: ubuntu-latest
    outputs:
      tfmigrate_targets: ${{ steps.list-targets.outputs.tfmigrate_targets }}
      terraform_targets: ${{ steps.list-targets.outputs.terraform_targets }}
    steps:
      - uses: actions/checkout@v3
      - uses: aquaproj/aqua-installer@v1.1.2
        with:
          aqua_version: v1.25.0
      - uses: suzuki-shunsuke/tfaction/list-targets@v0.6.2
        id: list-targets

  tfmigrate-plan:
    name: "tfmigrate-plan (${{matrix.target.target}})"
    runs-on: ${{matrix.target.runs_on}}
    needs: setup
    # if services is empty, the build job is skipped
    if: "join(fromJSON(needs.setup.outputs.tfmigrate_targets), '') != ''"
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.setup.outputs.tfmigrate_targets)}}
    env:
      TFACTION_TARGET: ${{matrix.target.target}}
      TFACTION_JOB_TYPE: tfmigrate
    steps:
      - uses: actions/checkout@v3

      # We recommend using GitHub App Token instead of personal access token,
      # but in this getting started let's use personal access token.
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.APP_ID }}
          private_key: ${{ secrets.APP_PRIVATE_KEY }}

      - uses: aquaproj/aqua-installer@v1.1.2
        with:
          aqua_version: v2.11.0-1

      - uses: suzuki-shunsuke/tfaction/export-secrets@main
        with:
          secrets: ${{ toJSON(secrets) }}

      - uses: suzuki-shunsuke/tfaction/setup@v0.6.2
        id: setup
        with:
          github_app_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
         # ssh_key: ${{ secrets.TERRAFORM_PRIVATE_MODULE_SSH_KEY }} # This isn't needed if you don't use SSH key to checkout private Terraform Modules

      # - uses: suzuki-shunsuke/tfaction/test@v0.6.2
      #   with:
      #     github_app_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: suzuki-shunsuke/tfaction/tfmigrate-plan@v0.6.2
        with:
          github_app_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}

  terraform-plan:
    name: "terraform-plan (${{matrix.target.target}})"
    runs-on: ${{matrix.target.runs_on}}
    needs: setup
    # if services is empty, the build job is skipped
    if: "join(fromJSON(needs.setup.outputs.terraform_targets), '') != ''"
    strategy:
      fail-fast: false
      matrix:
        target: ${{fromJSON(needs.setup.outputs.terraform_targets)}}
    env:
      TFACTION_TARGET: ${{matrix.target.target}}
      TFACTION_JOB_TYPE: terraform
      TF_ROOT: ${{ env.TFACTION_TARGET }}
    steps:
      - uses: actions/checkout@v3

      # We recommend using GitHub App Token instead of personal access token,
      # but in this getting started let's use personal access token.
      # - name: Generate token
      #   id: generate_token
      #   uses: tibdex/github-app-token@v1.8.0
      #   with:
      #     app_id: ${{ secrets.APP_ID }}
      #     private_key: ${{ secrets.APP_PRIVATE_KEY }}
      - name: Setup binaries
        run: |
          sudo curl -fL -o tfnotify.tar.gz https://github.com/mercari/tfnotify/releases/download/v0.8.0/tfnotify_linux_amd64.tar.gz
          sudo tar -C /usr/bin -xzf ./tfnotify.tar.gz
          sudo curl -fL -o rover_0.3.2_darwin_arm64.zip https://github.com/im2nguyen/rover/releases/download/v0.3.3/rover_0.3.3_linux_amd64.zip
          sudo zip -FFv rover_0.3.2_darwin_arm64.zip --out rover.zip
          sudo unzip -o rover.zip -d /usr/bin

      - uses: aquaproj/aqua-installer@v1.1.2
        with:
          aqua_version: v1.25.0

      - uses: suzuki-shunsuke/tfaction/export-secrets@v0.6.2
        with:
          secrets: ${{ toJSON(secrets) }}

      - uses: suzuki-shunsuke/tfaction/setup@v0.6.2
        id: setup
        with:
          github_app_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          #ssh_key: ${{ secrets.TERRAFORM_PRIVATE_MODULE_SSH_KEY }} # This isn't needed if you don't use SSH key to checkout private Terraform Modules

      # - uses: suzuki-shunsuke/tfaction/test@v0.6.2
      #   with:
      #     github_app_token: ${{ secrets.GITHUB_TOKEN }}

      - uses: suzuki-shunsuke/tfaction/terraform-plan@v0.6.2
        with:
          github_app_token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
        
      - uses: iterative/setup-cml@v2
        id : visualization_setup
        with:
          REPO_TOKEN: ${{ steps.generate_token.outputs.token }} # Can use the default token for most functions

      - name: Terraform visualization
        id: visualization
        working-directory: ${{ env.TFACTION_TARGET }}
        run: |
          terraform show -json tfplan.binary > out.json
          rover_v0.3.3 -planJSONPath ./out.json -genImage true
          echo '## :mag_right: Plan Result Diagram' > report.md
          echo '![](./rover.svg)' >> report.md
          cml comment create --publish report.md

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        # See https://github.com/infracost/actions/tree/master/setup for other inputs
        # If you can't use this action, see Docker images in https://infracost.io/cicd
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          
      - name: Checkout base branch
        uses: actions/checkout@v3
        with:
          ref: '${{ github.event.pull_request.base.ref }}'

      # Generate Infracost JSON file as the baseline.
      - name: Generate Infracost cost estimate baseline
        run: |
          infracost breakdown --path=${TF_ROOT} \
                              --format=json \
                              --out-file=/tmp/infracost-base.json

      # Checkout the current PR branch so we can create a diff.
      - name: Checkout PR branch
        uses: actions/checkout@v3

      # Generate an Infracost diff and save it to a JSON file.
      - name: Generate Infracost diff
        run: |
          infracost diff --path=${TF_ROOT} \
                          --format=json \
                          --compare-to=/tmp/infracost-base.json \
                          --out-file=/tmp/infracost.json

      # Posts a comment to the PR using the 'update' behavior.
      # This creates a single comment and updates it. The "quietest" option.
      # The other valid behaviors are:
      #   delete-and-new - Delete previous comments and create a new one.
      #   hide-and-new - Minimize previous comments and create a new one.
      #   new - Create a new cost estimate comment on every push.
      # See https://www.infracost.io/docs/features/cli_commands/#comment-on-pull-requests for other options.
      - name: Post Infracost comment
        run: |
            infracost comment github --path=/tmp/infracost.json \
                                     --repo=$GITHUB_REPOSITORY \
                                     --github-token=${{github.token}} \
                                     --pull-request=${{github.event.pull_request.number}} \
                                     --behavior=update

      # - name: Slack Notification
      #   id: slack
      #   working-directory: ${{env.SLACK_NOTI_TEMPLATE_PATH}}
      #   run: |
      #     terraform -chdir="${{ env.TFACTION_TARGET }}" show tfplan.binary | tfnotify -config ./terraform/.tfnotify/slack.yml plan 
      #   env:
      #     SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
      #     SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL }}
      #     SLACK_BOT_NAME: tf-notify-bot
      #     GITHUB_TOKEN:  ${{ steps.generate_token.outputs.token }}


  # This job is used for branch protection rule
  # Add this job to `Status checks that are required`
  status-check:
    runs-on: ubuntu-latest
    needs: [terraform-plan, tfmigrate-plan, setup]
    if: failure()
    steps:
      - run: exit 1
